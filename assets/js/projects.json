{
  "random-quote-generator": {
    "title": "Random Quote Generator",
    "thumbSource": "/assets/img/dist/random-quote-generator/thumb-large.jpg",
    "description": "<p>This project utilizes a Javascript object containing quotes and attributions. A random number generator dynamically updates the maximum value to the number of quotes in the object. The number generated fetches the data for the new quote.</p><p>Users can generate a new random quote with a button and can also tweet out the quote by clicking on the Tweet button. Upon clicking the tweet button, scripting first verifies that the quote and attribution are less than 140 characters combined, truncating the quote if necessary, and opens up a window with the tweet pre-filled.</p>",
    "projectLink": "/projects/random-quote-generator",
    "githubLink": "https://github.com/dslemay/random-quote-generator"
  },
  "wikipedia-viewer": {
    "title": "Wikipedia Viewer",
    "thumbSource": "/assets/img/dist/wikipedia-viewer/thumb-large.jpg",
    "description": "<p>This lightweight Wikipedia viewer alllows the user to fetch a random article or to search for a particular topic, returning up to the top 10 results. Each result contains the title of the Wikipedia entry and an excerpt of the entry. The user may click on any entry to open the full article on Wikipedia's website.</p>",
    "projectLink": "/projects/wikipedia-viewer",
    "githubLink": "https://github.com/dslemay/wikipedia-viewer"
  },
  "twitch-viewer": {
    "title": "Twitch Viewer",
    "thumbSource": "/assets/img/dist/twitch-viewer/thumb-large.jpg",
    "description": "<p>This project allows for a number of Twitch users to be entered, and have various pieces of information displayed for each one: account logo, username, game they are currently playing if applicable, online status, and a link to their account. The viewer will also be able to identify if a particular user account does not exist or is unavailable for some reason. The user is able to filter the results by all users, online users, or offline users. Lastly, once the data is loaded, the API will be polled every 5 minutes to refresh the online status and game variables for each user; at any time the user may also click the refresh icon to manually poll the API.</p><p>This web app also utilizes local storage to allow the end user to customize which Twitch users they want to follow. Upon loading, if nothing is stored in local storage, a default initial users array will populate and display that data. Users can be both removed and added from the display which will be saved to local storage for the next time that the user visits the page. Users are added by clicking the plus icon in the menu bar which will accept single users or a group of users seperated by commas or spaces. Upon hovering over each user in the viewer, a X will appear in the top right corner; when clicked it will remove the user from the display and local storage.</p><p>This project uses multiple data verification functions to properly display information and maintain visual flow. The display of user data also adjusts the dynamic HTML creation for each user based off of values polled from the API. As in the case of a user not having a logo uploaded, the img element is left blank but assigned another CSS class to maintain the dimensions of the space and properly align the user with users which have a logo associated with the account.</p>",
    "projectLink": "/projects/twitch-viewer",
    "githubLink": "https://github.com/dslemay/twitch-viewer"
  },
  "javascript-calculator": {
    "title": "JavaScript Calculator",
    "thumbSource": "/assets/img/dist/javascript-calculator/thumb-large.jpg",
    "description": "<p>This calculator is built in React.js and is fully functional for basic math operations as well as converting items to a percentage and handling negative numbers. The calculator keys have animation and highlighting when pressed. Additionally, the calculator utilizes a custom display of scientific notation, differing visually from the default JavaScript implementation slightly, while also checking to make sure that the display does not overflow.</p><p>React offered many benefits to this project including: handling the state of all the variables needed for completing operations at the App component level and iterating instances of the numeric and math operand keys changing values and onClick actions based on properties passed down.</p>",
    "projectLink": "/projects/javascript-calculator",
    "githubLink": "https://github.com/dslemay/javascript-calculator/"
  },
  "pomodoro-timer": {
    "title": "Pomodoro Timer",
    "thumbSource": "/assets/img/dist/pomodoro-timer/thumb-large.jpg",
    "description": "<p>The Pomodoro Timer is built using ReactJS and allows the user to specify the session and break times that they wish to use in increments of one minute. Clicking on the circle countdown asset start or stops the timer. When a timer completes, a gong sound effect plays, and the timer will automatically switch to the next timer, alternating between sessions and breaks. The user may reset a timer by adjusting the time with one of the counters when the timer is paused. While the timer is running, the buttons to increase or decrease the timer are disconnected. Lastly, the title bar of the tab also dynamically updates with the current time remainging and the timer that is running for a quick visual cue if open with other tabs.</p>",
    "projectLink": "/projects/pomodoro-timer",
    "githubLink": "https://github.com/dslemay/pomodoro-timer/"
  },
  "tic-tac-toe": {
    "title": "Tic Tac Toe Game",
    "thumbSource": "/assets/img/dist/tic-tac-toe/thumb-large.jpg",
    "description": "<p>The Tic Tac Toe Game is built using ReactJS and allows the user to play a game against a computer. Upon first load the player is offered the option of playing as X or O; X always plays first. The computer AI runs through a priority of move options. First, it looks for the ability to win the game. If this is not possible, but the player can win the game next turn the computer will block the player. Finally, if neither of these are possible, the computer will play in a random empty cell.</p>",
    "projectLink": "/projects/tic-tac-toe",
    "githubLink": "https://github.com/dslemay/tic-tac-toe/"
  },
  "simon-game": {
    "title": "Simon Game",
    "thumbSource": "/assets/img/dist/simon-game/thumb-large.jpg",
    "description": "<p>The Simon Game is built using ReactJS. The user takes turns playing a randomly generated pattern that the computer displays. If the player can successfully complete 20 turns, they win. If the user makes a mistake in the pattern, a buzzer noise will sound. If strict mode is not active, the computer will play the pattern for the user again. If strict mode is enabled, the current pattern will be erased and the game will start over. The game is also responsive on smaller devices.</p>",
    "projectLink": "/projects/simon-game",
    "githubLink": "https://github.com/dslemay/simon-game/"
  },
  "wanderful": {
    "title": "Wanderful",
    "thumbSource": "/assets/img/dist/wanderful/thumb-large.jpg",
    "description": "<p>Wanderful is a web app to connect users with fun, randomized destinations and things to do when they get there. Upon visiting the site, users are able to click on a button and be directed to a destination details page for a randomly generated location from the database. Here users can view a brief description of the location and details such as hotels, restaurants, and entertainment available at the location. Additionally, users can get flight information to the destination's nearest airport. Users are also able to create an account which allows them to save their favorite destinations and points of interest for later retrieval on the user's dashboard.</p><p>Wanderful is built on the MERN stack, and also includes judicious use of Redux to handle the data management from backend to frontend. Wanderful was built by myself and two other developers as part of a learning cohort. I completed most of the backend as well as established the structure and actions for the Redux store. I also assisted with creating and refactoring some React components for better flow or reusability.</p>",
    "projectLink": "http://www.wanderful-travel.com",
    "githubLink": "https://github.com/chingu-coders/Voyage2-Bears-11"
  }
}
